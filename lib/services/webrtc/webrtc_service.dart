import 'package:flutter/foundation.dart';
import 'package:flutter_webrtc/flutter_webrtc.dart';

import '../../models/room/rtc_connection_model.dart';

/// The `WebRTCService` interface defines the methods and properties required
/// to manage WebRTC peer connections, including the negotiation of media
/// sessions, handling of media streams, and exchange of ICE candidates.
abstract class WebRTCService {
  Future<void> initializeLocalStream();

  /// Initializes the WebRTC service with necessary configurations.
  /// This may include setting up local media streams, configuring STUN/TURN servers,
  /// and preparing the peer connection for future offers/answers exchange.
  ///
  /// @param localStream The local media stream to be used in the WebRTC connection.
  Future<void> initializeLocalPeer(
    ValueChanged<RtcConnectionModel> rtcConnectModel,
  );

  /// Creates a WebRTC offer for initiating a connection with a remote peer.
  /// This method should generate an SDP offer and handle its signaling
  /// through the connected signaling service.
  Future<void> createOffer(
    RTCPeerConnection? localPeerConnection,
    AsyncValueSetter<String> spdToSignal,
  );

  /// Creates a WebRTC answer in response to an offer received from a remote peer.
  /// This method should generate an SDP answer based on the received offer
  /// and handle its signaling through the connected signaling service.
  ///
  /// @param sdp The SDP offer string received from the remote peer.
  Future<String?> createAnswer(String sdp);

  /// Sets the remote description on the peer connection using the provided SDP.
  /// This is necessary for both initiating and responding to a WebRTC connection.
  ///
  /// @param sdp The SDP string (offer or answer) from the remote peer.
  Future<void> setRemoteDescription(String sdp);

  /// Adds an ICE candidate received from the remote peer to the peer connection.
  /// This is part of the ICE negotiation process to establish the media path.
  ///
  /// @param candidate The ICE candidate object.
  Future<void> addIceCandidate(RTCIceCandidate candidate);

  /// Closes the peer connection and releases all associated resources.
  /// This method should be called when the WebRTC connection is no longer needed.
  void dispose();

  /// Stream that emits when a new remote media stream is added to the peer connection.
  /// Subscribers can use this stream to display the remote video/audio to the user.
  Stream<MediaStream> get onAddRemoteStream;

  /// Stream that emits when a new ICE candidate is generated by the peer connection.
  /// These candidates should be signaled to the remote peer through the signaling service.
  Stream<RTCIceCandidate> get onIceCandidate;

  /// Stream that emits when the connection state changes.
  /// This can be used to track the state of the WebRTC connection (e.g., connected, disconnected).
  Stream<bool> get onConnectionStateChange;
}
